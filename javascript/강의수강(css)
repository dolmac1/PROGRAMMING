<10. css/실습환경>

1강. css reset
- css는 처음에 초기화를 하고 사용하여야 한다, 브라우저마다 다른 모양으로 출력될 수 있기 때문에 동일하게 기본적으로 제공하는 스타일로 보여주기 위해서 초기화하는 것
- reset css cdn 에 가서 초기화 css 를 복사해서 사용할 수 있다.
- reset css cdn은 무조건 우리가 정의한 css보다 위에 link 해야함
- 10강 index_1.html, main_1.css
-----------------------------------------------
2강. codepen
- 구글에 codepen 검색
- start coding 눌러서 할 수 있음
-----------------------------------------------
3강. emmet
- css에 .box와 같이 class로 클래스 선택자로 선언을 해놓으면 include한 html에서 tag.class하고 엔터 치면 바로 그 태그의 class명을 가진 태그를 만들어줌
- >하고 선택자를 하면 자식 요소로 만들어짐
- emmet문법은 보통 태그를 만들때 많이 사용한다
- 보통 에디터들이 emmet 문법을 제공하므로 따로 설치할 필요는 없다
- emmet 문법 + tab키로 사용
-----------------------------------------------
<11. css/개요, 선택자, 상속>

1강. 기본문법
- css는 화면의 모양을 바꿔주는 것
- css는 보통 선택자{ 속성:속성값; 속성:속성값; } 의 형태로 사용하며 속성과 속성값 사이에는 :, 속성끼리는 ;로 구분
- 선택자는 속성과 값을 지정할 때상을 검색할 때 사용
- 속성과 값은 검색된 대상에 지정될 css명령을 지정
- 주석은 /* */ 로 작성
-----------------------------------------------
2강. 선언방식
- 인라인 방식은 선택자가 필요없이 태그에 바로 사용
- 내장방식은 head 태그 안에 style 태그를 정의해서 css를 정의
- 선언방식은 외부에 선언되어있는 css파일을 가져오는 것으로 link태그를 통해서 가져온다. 보통 이방식을 사용
- @import 방식은 외부에 있는 문서를 가져오는 것으로 css내에서 외부의 css를 가져올 때 사용함 (@import url("./mainframe.css"); 이런식으로 사용)
- link는 html에서 @import 는 css에서 사용
- link 방식은 1번 코드가 불러와지고 2번코드가 불러와지는 뒤에 정의된 내용이 필요하면 @import 방식이 유용하게 사용가능
-----------------------------------------------
3강. 기본 선택자
- 4가지 선택자가 기본인데 전체선택자, 태그 선택자, 클래스 선택자, 아이디 선택자가 존재
- 전체 선택자는 *으로 나타내며 모든 요소를 선택할 때 사용
- 태그 선택자는 태그 이름으로 선택하여 css를 적용할 때 사용 ( div, head, p, ....등등)
- 클래스 선택자는 특정한 클래스를 지정하여 css를 적용할 때 사용 .클래스명으로 사용
- 아이디 선택자는 특정한 아이디를 지정하여 css를 적용할 때 사용하며 #id 를 통해 사용 (id는 고유하게 사용)
-----------------------------------------------
4강. 복합 선택자
- 일치 선택자는 선택자 E와 F가 모두 만족하는 경우 css를 지정 예를들어 span.orange와 같이 사용하며 span 태그중 클래스가 orange인 곳에 적용
- 자식 선택자는 선택자의 자식 선택자를 선택하여 css를 적용하는 것으로 ul > .orange와 같이 사용하며 ul태그의 자식인 곳 중에서 orange 클래스를 갖는 곳에 css 적용 >앞이 조건 뒤가 선택
- 후손 선택자는 E의 후손 F를 선택하는 것으로 띄어쓰기로 구분한다 div .orange와 같이 사용하며 div의 후손 중에서 .orange 클래스인 곳에 css를 적용한다 자식의 자식의 자식의 .....까지가 다 후손임
- 자식은 한 뎁스 아래만을 말하며 자식은 후손에 포함된다. 부모는 한뎁스 위를 말하며 부모는 조상에 포함된다.
- 인접 형제 선택자는 E의 다음 형제 요소 F하나만 선택, .orange + li 와 같은 형태로 사용하며 .orange 클래스를 갖는 태그의 다음 인접해있는 형제에 지정
- 일반 형제 선택자는 E의 다음 모든 형제 요소 F를 선택, .orange ~ li 와 같은 형태로 사용하며 .orange 클래스를 갖는 태그의 다음 형제들 모두에게 css 지정
-----------------------------------------------
5강. 가상클래스 선택자 - hover, active, focus
- 가상 클래스 선택자는 앞에 : 하나 붙어있음
- hover는 마우스 포인터가 올라가있는 동안에만 동작하는 css를 작성할 때 사용
- hover 예제 : 11강 index_1.html, main_1.css
- active는 마우스로 클릭하는 동안에만 css를 적용할 때 사용
- 변화를 천천히 하려면 transition:시간으로 지정해주면 됨
- active 예제 : 11강 main_1.css에 hover를 active로 변경
- focus는 input에 포커스가 지정되었을 때 사용
- focus 예제 : 11강 index_2.html, main_2.css
-----------------------------------------------
6강 가상클래스 선택자 - first-child, last-child
- first-child는 E가 형제 요소 중 첫번째 요소라면 선택하는 것으로 E:first-child같은 방식으로 사용
- last-child는 E가 형제 요소 중 마지막 요소라면 선택하는 것으로 E:last-child 같은 방식으로 사용
-----------------------------------------------
7강. 가상클래스 선택자 - nth-child
- n번째 자식요소를 선택하여 css를 적용하기 위해서 사용 0부터 사용 li:nth-child(2n)과 같은 형태로 사용하며 2,4,6,8....번째 자식들을 선택해서 css적용, +, -, *, / 같은 기호를 사용하여 수식으로 넣을 수 있음
-----------------------------------------------
8강. 가상클래스 선택자 - xxx-child 주의사항
- n번째에 다른 태그가 있으면 적용 안될수도 있음 오른쪽에서 왼쪽으로 읽는게 좋음
- 만약 .fruits p:nth-child(1)일 경우 fruits클래스의 p태그중 첫번째에 지정하는 것 같지만 첫번째가 p 가 아닌 다른 태그일경우 지정되지않느다
-----------------------------------------------
9강. 가상클래스 선택자 - nth-of-type, not
- nth-of-type은 E와 동일한 타입을 가진 것 중에서 n번째인 곳을 지정
- E:nth-of-type(n)으로 사용함 예를들어서 .fruit p:nth-of-child(1)하면 fruit클래스의 자식중에서 타입이 p인 것 중에서 첫번째를 지정해줌
- nth-of-type은 태그를 찾는데만으로 사용해야함(클래스 안댐)
- not은 조건에서 뺄 때 사용
- .fruits li:not(.strawberry)라고 사용하면 과일 클래스 안의 li태그들 중에서 딸기만 빼고 선택해서 css 적용
-----------------------------------------------
10강. 가상요소 선택자 - before
- 가상 클래스랑은 다르게 가상 요소 선택자는 가상요소를 생성해서 하는 것으로 ::을 붙여서 쓴다
- E::before는 요소 내부의 앞에 내용을 삽입할 때 사용
- ul>li{숫자$}*5처럼 사용하면 ul태그 밑에 li 5개 생성
- before 선택자 사용 시에 content: "내용";을 사용하지 않으면 우무런 효과가 일어나지 않음, 앞에 css를 적용하는거니까 content가 있어야하는것
- before 예시는 11강 index_3.html, main_3.css
-----------------------------------------------
11강. 가상요소 선택자 - after
- after는 요소의 뒤에 내용을 추가하는 것
- before와 마찬가지로 content: ""; 가 들어가야 css가 적용되는 것을 볼 수 있음
- content속성에 content: url("주소");로 해서 연결할 수 있음
- before, after는 : 하나만 써도 동작은 하지만 가상 클래스와 차별을 두기 위해서 ::를 쓴다(원래는 :가 하나쓰는걸로 출시되었으나 나중에 나뉘어 나온것임)
-----------------------------------------------
12강. 속성 선택자 - [attr], [attr=value]
- css에도 속성이라는 것이 있는데 color: red;의 color 부분이라고 생각 할 수도 있지만 html의 속성을 선택하는 것이지 저것을 의미하는 것이 아님
- [attr]의 형식으로 사용하며 attr에 선택할 속성을 넣음
- [attr=value] 형태로도 쓸수있으며 특정 속성의 값이 value인 경우에 그곳에 css를 적용하겠다 라는 것을 나타냄
- 11강 index_4.html, main_4.css
-----------------------------------------------
13강. 속성 선택자 - [attr^=value], [attr$=value]
- attr^=value는 속성이 value로 시작하는 것을 선택하여 css적용
- attr$=value는 위의 ^와 반대로 value로 끝나는 것을 선택하여 css적용
- 11강 index_5.html, main_5.css
-----------------------------------------------
14강. 상속
- 특정한 요소들은 부모 요소에 적용된 속성이 하위 요소에게도 적용되는데 상속이라고 부른다
- 상속이 되는 속성들은 대부분 글자를 다루는 속성들임
- 상속이 되는 속성 : font, color, text-align, text-indent ..... 등등 글자를 다루는 속성들
- 원래는 상속되지 않는 것을 강제로 상속시킬 수 있는데 이걸 강제 상속이라고 부른다
- 강제 상속은 position: inherit;를 자식에 써서 사용(부모의 값을 자식이 물려받아서 사용하기 때문에 부모에서 바뀌면 자식 요소에서도 바뀐다.)
-----------------------------------------------
15강. 우선순위
- 한개의 html 태그문에서 css가 태그, 아이디선택자, 클래스선택자, 전체 선택자, 상속 등 다양하게 css를 지정 할 수 있는데 과연 어떤 css가 가장 우선순위가 높을까?
- 하나의 요소가 여러 선언의 대상이 될 경우, 아래의 순서대로 적용 우선 순위를 결정
  1. 명시도 점수가 높은 선언이 우선(명시도)
  2. 점수가 같은 경우, 가장 마지막에 해석(늦게 작성한)되는 선언이 우선(선언 순서)
  3. 명시도는 '상속' 규칙보다 우선(중요도)
  4. !important 가 적용된 선언 방식이 다른 모든 방식보다 우선으로 적용
- 점수를 구하는 방법
  1. !important = 무한대의 점수를 갖는다.
  2. 인라인 선언방식 = 1000점의 점수를 갖는다.(단 인라인 방식은 너무 쓸데없이 점수가 높기 때문에 유지보수에 문제가 있어서 사용을 자제한다.)
  3. 아이디 선택자 = 100점의 점수를 갖는다.(고유한 요소일수록 점수가 높음)
  4. 클래스 선택자 = 10점의 점수를 갖는다.(아이디 선택자보다는 낮음)
  5. 태그 선택자 = 1점의 점수를 갖는다.
  6. 전체 선택자 = 0점의 점수를 갖는다.
  7. 상속 = 점수를 계산하지 않는다.
- 위의 1~7등 순서로 적용(좁은 범위에서 넓은 범위로 생각하면 쉬움)
-----------------------------------------------
<12. css/ 단위>
1강. px, %
- px는 화면에 픽셀 단위로 절대적인 값으로 고정하는 것, 단 화면의 픽셀에 따라서 살짝 바뀔 순 있음
- %는 부모요소의 가로 사이즈에 영향을 받음, 부모 요소의 n %의 크기로 나타냄
-----------------------------------------------
2강. em, rem
- em은 자기 자신의 폰트 사이즈에 영향을 받음, 원하는 너비px = font-size의 px * 크기em
- font size는 위에서부터 상속되서 font-size를 2em이라고 하면 폰트의 크기가 부모의 2배가 된다
- rem은 root em 이다. html파일의 root라고 할 수 있는 html에 지정된 폰트사이즈의 영향만 받음(html태그에 대한 폰트 사이즈를 조절시에만 적용됨)
-----------------------------------------------
3강. vw, vh
- vw는 viewport width 의 약어 vh는 viewport height의 약어로, 출력하는 화면 전체를 viewport라 하며 화면 전체 대비 비율이라고 보면된다.
- 백분율 단위로 넣으면 된다. 전체를 100vw, 100vh라고 생각하면 됨
-----------------------------------------------
4강. vmin, vmax
- vmax는 가로너비와 세로너비중 더 넓은 사이즈의 너비에 대한 비율, vmin은 더 좁은 사이즈의 너비에 대한 비율
- 백분율으로 나타내며 100vmax, 100vmin이런식으로 쓴다
-----------------------------------------------
<13. css/속성 - 박스 모델>
1강. width, height
- width와 height의 기본값은 auto
- 블록요소는 먹지만 인라인 요소는 명령이 먹지 않는다.
-----------------------------------------------
2강. max-width, min-width, max-height, min-height
- 최대 가로 너비, 최소 가로 너비, 최대 세로 너비, 최소 세로 너비를 지정해줌
- max는 기본값이 none이고, min은 기본값이 0이 기본값으로 최대는 기본이 제한이 없지만, 최소는 0이다
- 부모요소가 자식요소의 min 값보다 작아지면 자식요소는 Min값 이하로 줄어들 수 없기 때문에 부모요소만 작아짐
-----------------------------------------------
3강. margin
- margin 은 외부 여백을 지정
- 음수로 지정할수도 있다.
- css에서는 0을 적을땐 단위를 적진않음
- %로 쓰면 부모요소의 너비의 퍼센트로 들어감
- margin은 4가지 방식으로 사용 가능
  - margin: 10px; //상하좌우 여백이 10px
  - margin: 10px 20px; // 상하 10px, whkdn 20px
  - margin: 10px 20px 30px; //위, 좌우, 아래 순으로 10px, 20px , 30px
  - margin: 10px 20px 30px 40px; //위 우 아래 좌(시계방향)으로 10, 20 30,40 px
- margin-top margin-bottom margin-right margin-left도 사용하는데 이건 특정 1,2개 부분에만 margin 을 넣을 때 사용
-----------------------------------------------
4강. margin - 중복(collapse)
- margin의 특정 값들이 중복되어 합쳐지는 현상
  - 두개의 형제 요소들의 margin-top과 margin-bottom이 만났을 때
  - 부모 요소의 margin-top과 자식요소의 margin-top이 만났을 때
  - 부모 요소의 margin-bottom과 자식요소의 margin-bottom이 만났을 때
  - 잘못된건 아님
- 기본적으로 형제 요소의 margin 좌우 margin은 더해짐, 그러나 상하로 만나면 중복되서 만약 위의 margin-bottom이 20, 아래의 margin-bottom이 20이면 둘사이의 margin은 20
- 부모요소의 margin-top이 시작되는 부분과 자식요소의 margin-top이 시작되는 부분이 만나서 있다면 자식요소의 margin-top이 부모요소의 margin-top 처럼 쓰임
- 마진 값이 둘다 양수면 더큰값, 둘다 음수면 더 작은 값, 음수하나 양수 하나이면 둘을 더한 값
-----------------------------------------------
5강. padding
- 요소의 내부에 있는 여백을 지정할 때 사용
- 기본 값은 0임
- 사용방법은 margin과 같음
- padding을 추가하면 요소의 크기가 그만큼 커지는 현상이 있음
- box-sizing: border-box; 옵션을 넣으면 padding을 넣어도 크기가 커지지 않고 크기가 고정된 상태에서 내부에 padding이 들어감
-----------------------------------------------
6강. border
- 테두리 선을 지정할 때 사용
- border는 속성이 border-width, border-style, border-color이 있으며 기본값은 각각 medium, none, black이다.
- css에는 border: 두께 종류 색상; 이런식으로 사용
- border: 1px solid red; 이렇게 쓰는데 solid는 실선임
- width는 medium, thin, thick 또는 px,em,cm단위로 사용 가능
- border도 padding이나 margin 처럼 상하좌우를 따로 지정할 수 있는데 사용법을 border-width: 옵션;으로 사용
- 선의 종류는 none, hidden, solid(실선), dotted(점선), dashed(파선), double(두줄선), groove(홈이 파여있는 모양 선), ridge(솟은 모양 선(groove의 반대)), inset(요소가 들어간 선), outset(요소 전체가 나온 모양 선)
- border-style도 border-width 처럼 상하좌우 다르거 지정 가능
- border-color는 색상의 개념으로 쓰면 됨(transparent를 쓰면 백그라운드 색깔과 같은 색깔로 테두리색 지정)
- border 속성같은 경우에는 상하 좌우 다르게 지정하기 위해서 border-top-width:1px; 이런식으로 지정할 수 있음
- 요소의 크기는 요소의 width + border의 두께로 된다 이걸 해결하기 위해서는 직접 width와 height에 선의 두께를 빼거나, box-sizing: border-box; 속성을 넣으면 된다.
- 13강 index_1.html, main_1.css
-----------------------------------------------
7강. box-sizing
- padding과 border는 박스의 크기에 영향을 주는 것을 봤음
- box-sizing 옵션을 통해 변경 가능
- 기본값은 content-box는 너비와 높이만으로 크기를 지정해서 border나 padding을 넣으면 크기가 바뀜
- border-box옵션은 border와 padding을 합쳐서 너비와 높이 계산, border와 padding을 넣어도 박스의 크기가 변하지 않음
- padding-box옵션도 있긴하나 호환성이 안좋아서 잘 안쓴다.
-----------------------------------------------
8강. display
- display는 요소의 박스 타입 유형을 설정해주는 것
- block는 블록요소로 지정, inline은 인라인 요소로 지정, inlink-block는 인라인-블록요소로 지정(input요소), 기타(table, table-cell, flex), none으로 넣을 수 있음
- 각 태그마다 기본값은 있지만 바꿔서 사용할 수 있음
- inline-block은 기본적으로는 inline이지만 inline이 기본적으로 가질 수 없는 width, height, padding 같은 것을 가질 수 있음
- 13강 index_2.html, main_2.html, main_2.js 
-----------------------------------------------
9강. overflow
- 요소의 크기 이상으로 내용이 넘쳤을 때, 내용의 보여짐을 제어함
- 값은 visible(넘친부분 보여줌), hidden(넘친부분 숨김), scroll(스크롤 생성), auto가 있음
-----------------------------------------------
10강.opacity
- 요소의 투명도를 지정할 때 사용
- 값은 숫자 0부터 1사이의 소수점 숫자로 지정
- 0은 화면에 존재하지만 안보이는거도 display:none;은 아예 없어진 것 이라는 차이가 있다고 보면 됨
-----------------------------------------------
<14. css/속성 - 글꼴, 문자>
1강. font, font-style
- font-style은 글자 기울기 지정, font-weight는 글자 두께, font-size는 글자크기(기본은 16px), line-height는 줄 높이(reset.css적용 시 1), font-family는 글꼴 변경
- font: 기울기 두께 크기 / 줄높이 글꼴; 으로 단축해서 사용 가능
- 중간에 /가 들어가는 이유는 크기랑 줄높이는 순서를 명확하게 하지 않으면 뭐가 뭔지 알 수 없기 때문에 /앞은 글자 크기 뒤는 줄높이로 구분해줌
- 단축속성을 사용하기 위해서는 font-size와 font-family는 필수로 입력해줘야함
- font-style은 글자의 기울기만 을 설정해주는 태그(normal, italic(이텔릭체), oblique(기울어진 글자체) 이 3가지 속성 존재)
-----------------------------------------------
2강. font-weight
- 글자의 두께(가중치) 설정
- 값으로는 normal(기본두께, 400), bold(두껍게, 700), bolder(부모 요소보다 더 두껍게), lighter(부모 요소보다 더 얇게), 숫자가 있으며 숫자는 100단위로 100~900까지 9단계 가능
상속값 bolder lighter
100   400     100
200   400     100
300   400     100
400   700     100
500   700     100
600   900     400
700   900     400
800   900     700
900   900     700
-----------------------------------------------
